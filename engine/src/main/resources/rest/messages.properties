#	\u00e0	\u00e0
#	\u00e8	\u00e8
#	\u00f2	\u00f2
#	\u00c8   \u00c8
#	\u00f9   \u00f9

#GENERAL
UNAUTHORIZED={0} is not allowed to {1} [{2}]
NOT_FOUND= a {0} with ''{1}'' code could not be found

#GROUP
group.code.notBlank=Code is required
group.name.notBlank=Name is required

group.exists =The group {0} already exists
group.code.mismatch=the group code specified the URI ''{0}'' does not match with the one provided in the payload ''{1}''
group.cannot.delete.reserved=The group {0} can not be deleted
group.cannot.delete.references=The group {0} can not be deleted due to references

#page_settings
NotEmpty.pagesettings.params=List of params is required

#PAGE
page.code.NotBlank=Code is required
page.exists=The page {0} already exists
page.code.mismatch=the page code specified in the URI ''{0}'' does not match with the one provided in the payload ''{1}''
page.delete.online=Online pages can not be deleted
page.delete.children=Pages with children pages can not be deleted
page.move.position.invalid=Invalid Request for page position change
page.move.group.mismatch=Can not move a page under a page owned by a different group
page.move.status.mismatch=Can not move a published page under an unpublished page

#GuiFragments
guifragment.code.notBlank=Code is required
guifragment.gui.notBlank=Gui code is required

guifragment.exists=The fragment ''{0}'' already exists
guifragment.doesNotExist=The fragment ''{0}'' does not exist
guifragment.code.mismatch=the fragment code specified the URI ''{0}'' does not match with the one provided in the payload ''{1}''
guifragment.cannot.delete.references=The fragment ''{0}'' cannot be deleted because it is referenced by fragments {1} and page models {2}
guifragment.cannot.delete.locked=The fragment ''{0}'' cannot be deleted because it is locked
guifragment.code.invalid=Code is mandatory, can only contain alphanumeric characters and underscores and its lenght cannot exceed 50


#pagemodel
pageModel.code.notBlank=code is required
pageModel.descr.notBlank=description is required
pageModel.configuration.notBlank=configuration is required
pageModel.configuration.frames.required=At least one frame is required
pageModelFrame.descr.notBlank=description is required
pageModel.code.exists=The page model ''{0}'' already exists
pageModel.frames.pos.mismatch=frame position should be zero based and progressive
pageModel.code.mismatch=the code specified the URI ''{0}'' does not match with the one provided in the payload ''{1}''
pageModel.cannot.delete.references=The page model ''{0}'' can not be deleted due to references

#Data Object Model
dataObjectModel.modelId.invalid=Model Id ''{0}'' is invalid because it has to be a long
dataObjectModel.doesNotExist=Model Id ''{0}'' does not exist
dataObjectModel.type.doesNotExist=no dataType with the code ''{0}'' could be found.
dataObjectModel.type.doesNotMachWithModel=dataType ''{0}'' does not match with the code ''{0}'' of extracted model.


dataObjectModel.modelId.notBlank=Model Id is required
dataObjectModel.descr.notBlank=Description is required
dataObjectModel.type.notBlank=Data Type is required
dataObjectModel.model.notBlank=Model is required

dataObjectModel.exists=The Data Object Model {0} already exists
dataObjectModel.modelId.mismatch=The Data Object Model code specified the URI ''{0}'' does not match with the one provided in the payload ''{1}''
dataObjectModel.cannot.delete.references=The Data Object Model {0} can not be deleted due to references

#Widget
widgetConfigurationRequest.code.notBlank=code is required

#Widget validators
content_viewer_list.defaultLangTitle.required=The title for the default language ''{0}'' is required.
content_viewer_list.pageLink.required=The selected page ''{0}'' in the link is not valid
content_viewer_list.defaultLangLink.required=Provide a link description for the default ''{0}'' language
content_viewer_list.parameters.invalid=Specify at least one parameter among categories, pagination, and maximum number of result

content_viewer_list.contentType.required=The content type is required
content_viewer_list.contentType.invalid=No content type found with code ''{0}''


content_viewer.contentId.required=contentId is required
content_viewer.contentId.not_found=No content found with id ''{0}''
content_viewer.contentId.invalid=the page groups ''{0}'' have to be compatible with the content groups.

# Entity Type
entityType.code.notBlank=Type Code is required
entityType.name.notBlank=Type Name is required

entityTypes.list.notBlank=Type List is required

entityType.exists=The Type {0} already exists
entityType.notExists=The Type {0} doesn't exists
entityType.code.mismatch=The Type code specified the URI ''{0}'' does not match with the one provided in the payload ''{1}''
entityType.cannot.delete.references=The Type {0} can not be deleted due to references

# Data Type

dataTypes.list.notBlank=Data Type List is required



#lang
language.active.required=The status ''active'' is required
